// explorando fun√ß√µes de callback
const animais = ["ü¶à", "üêê", "üêÆ"];

animais.forEach(function (icone) {
    console.log(icone)
});












// utilizando arrow functions

/*
animais.forEach((icone) => {
    console.log(icone)
});
*/








// Existe uma terceira forma de usarmos as fun√ß√µes de callback
// Vamos criar uma fun√ß√£o callback de forma externa
/*function imprimeIcone(icone) {
    console.log(icone);
}*/

// Perceba que essa fun√ß√£o ser√° usada como fun√ß√£o callback da mesma forma
// Temos que utilizar nesse caso sem os par√™tenses, se utilizar com os par√™ntese ele vai entender que quero o retorno da fun√ß√£o o que n√£o est√° correto, n√£o 
// estamos retornando nada
// Daremos prefer√™ncia as arrow functions
/*
animais.forEach(imprimeIcone);
*/












//O que √© um m√©todo? Em programa√ß√£o, chamamos de m√©todo uma fun√ß√£o que √© propriedade de um objeto.
// forEach() √© um m√©todo de array, significa que esta fun√ß√£o foi desenvolvida para trabalhar apenas com esse tipo de dado - no caso, com arrays.

// O forEach(), assim como alguns outros m√©todos de array do JavaScript que estamos vendo no curso, utiliza
//  a abordagem funcional de fun√ß√µes callback para executar o c√≥digo necess√°rio a cada elemento iterado no la√ßo:
/*
const lista = [1, 2, 3, 4, 5];
let soma = 0;

lista.forEach(numero => soma += numero);
console.log(soma) ;
*/













// Assim, vemos que o forEach() n√£o retorna nenhum tipo de valor, apenas executa o que est√° dentro do bloco da fun√ß√£o callback,
//  assim como for e for‚Ä¶of. Por√©m tamb√©m n√£o √© poss√≠vel modificar a forma que a itera√ß√£o ser√° feita 
// (√© sempre do primeiro elemento do array ao √∫ltimo) e n√£o h√° forma de interromper o la√ßo dada alguma condi√ß√£o, 
// como o break funcionaria para um for normal.

// O forEach() tamb√©m n√£o pode ser utilizado com qualquer iter√°vel, 
// apenas com arrays e tamb√©m n√£o pode ser utilizado de forma ass√≠ncrona - um tema um pouco mais avan√ßado

// Alguns guias de estilo de c√≥digo desenvolvidos pela comunidade, como o famoso guia do AirBNB,
//  indica preferencialmente o uso do forEach() no lugar do for‚Ä¶of para manter a consist√™ncia no estilo do c√≥digo.

// forEach() para trabalhar com arrays da forma mais corriqueira - percorrendo do primeiro ao √∫ltimo elemento, sem alterar a condi√ß√£o de parada,
//  e tamb√©m para manter a coes√£o do estilo quando em conjunto com outros m√©todos de array como map, filter e etc;

// for‚Ä¶of em caso de iter√°veis (dicion√°rios, conjuntos e outras estruturas de dados) ou de arrays quando for necess√°rio o uso de programa√ß√£o ass√≠ncrona e/ou
//  dar condi√ß√µes de sa√≠da do la√ßo (por exemplo, com o uso de break);

// for para casos em que seja necess√°rio manipular de forma mais fina as fases do la√ßo (condi√ß√£o inicial, condi√ß√£o de parada e incremento).